GraphQL

A more efficient alternative to REST API: 
- Increased mobile usage create need for efficient data loading
- Variety of different frontend frameworks and platforms
- Fast development speed & expectation of rapid feature development

GraphQL was developed to cope with the need for more flexibility and efficiency in client-server communication
	-No need to adjust API when product requirements and design change
	-After feedback cycles and product iterations
REST: structure endpoints according to the clients data needs

GraphQL:
Allows fine grained info about what data is read by clients
Enables evolving API and deprecation unneeded API features
Great opportunities for instrumenting and performance monitoring
GraphQL uses a strong type systems to define capabilities of an API

The Schema Definition Language (SDL)

type Person {				
	name: String!
	age: Int!
	posts: [Post!]!
    }

The exclamation mark means the type is required

Type Post {
	title: String!
	author: Person!
  }

Because REST APIs have fixed data structures, they expose several endpoints, instead in Graph, you only expose 1 data point.

event based realtime updates with subscriptions


GraphQL Schema
	-defines capabilities of the API specifying how a client can fetch and update data
	-represents contract between client and server
	-collection of GraphQL type with special too types

Root Types:
 	type Query {
		… 
		}

	type Mutation {
		… 
		}

	type Subscription {
		… 
		}

Architectural Use Cases

	1. GraphQL server with a connected database
	2. GraphQL server to integrate existing systems
	3. A hybrid approach with a connected database and integration of existing system


GraphQL server with a connected database
	- often used for Greenfield projects
	-uses a single 


Resolver Functions

- GraphQL queries/mutations consist of a set of fields
- GraphQL server has one resolver function per field
- The purpose of each resolver function is to retrieve the data for its corresponding field


From Imperative to declarative data fetching

Imperative data fetching
When fetching data in REST APIs, you
	1. Construct and send HTTP request (e.g with fetch in javascript)
	2. Receive and parse the serve response
	3. Store data locally
	4. Data displayed in UI

Declarative data fetching
    	1. Describe data requirements
    2. Display information in the UI


